@page "/sales-overview-2022"
@using ChartJs.Blazor.PieChart;
@using Google.Protobuf.WellKnownTypes;
@using PresalesMonitor.Shared;
@using PresalesMonitor.Client.Web.Helpers;
@inject Presales.PresalesClient PresalesClient
@implements IDisposable
@layout SalesOverviewLayout

<style>
    body {
        overflow: hidden;
    }
</style>

<PageTitle>Sales Overview 2022</PageTitle>

@*<h3>SalesOverview2022</h3>*@

@if (overview == null || _img == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <img class="background" src="@_img.Regular" alt="@_img.AltDescription" />
    <div class="legend">
        <div>
            <p>@Helpers.ToCurrencyString(overview.PlanSmall)</p>
        </div>
        <div>
            <p>@Helpers.ToCurrencyString(overview.PlanFull)</p>
        </div>
    </div>

    <div class="charts">
        <div class="chart_small">
            <Chart Config="_pieSmall"></Chart>
            <p class="percent">@Helpers.ToPercentString(decimal.ToDouble(overview.Profit / overview.PlanSmall))</p>
        </div>
        <div class="chart_full">
            <Chart Config="_pieFull"></Chart>
            <p class="percent">@Helpers.ToPercentString(decimal.ToDouble(overview.Profit / overview.PlanFull))</p>
        </div>
    </div>
    <div class="top">
        <table>
            @for (int i = 0; i < 4; i++)
            {
                <tr>
                    <td>@(i + 1). </td>
                    <td>@overview.Top[i].Name</td>
                    <td>@Helpers.ToCurrencyString(overview.Top[i].Profit)</td>
                </tr>
            }
        </table>
        <table>
            @for (int i = 4; i < 8; i++)
            {
                <tr>
                    <td>@(i + 1). </td>
                    <td>@overview.Top[i].Name</td>
                    <td>@Helpers.ToCurrencyString(overview.Top[i].Profit)</td>
                </tr>
            }
        </table>
    </div>
}

@code {
    private SalesOverview? overview;
    private Image? _img;
    private PieConfig _pieSmall = new PieConfig();
    private PieConfig _pieFull = new PieConfig();

    private PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(10));

    private async Task<SalesOverview> UpdateData() => await PresalesClient.GetSalesOverviewAsync(new Empty());
    private async Task<Image> UpdateImage() => await PresalesClient.GetImageUrlAsync(new ImageRequest { Keyword = "happy new year", Orientation = "landscape" });

    protected override void OnInitialized() => RunTimer();
    public void Dispose() => periodicTimer?.Dispose();

    private async void RunTimer()
    {
        var options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = false },
                Legend = new Legend { Display = false },
                Tooltips = new Tooltips { Enabled = false },
                CutoutPercentage = 30,
                Animation = new ArcAnimation
                {
                    AnimateScale = true,
                    AnimateRotate = true
                }
            };

        _pieSmall.Options = options;
        _pieFull.Options = options;

        await UpdateCharts();
        StateHasChanged();

        while (await periodicTimer.WaitForNextTickAsync())
        {
            overview = await UpdateData();
            _img = await UpdateImage();
            await UpdateCharts();
            StateHasChanged();
        }
    }

    private async Task UpdateCharts()
    {
        overview = await UpdateData();
        _img = await UpdateImage();
        if (overview == null) return;

        _pieFull.Data.Datasets.Clear();
        _pieSmall.Data.Datasets.Clear();

        List<string> datasetColors = new()
        {
            // ColorUtil.ColorString(12, 90, 74, 1),
            ColorUtil.ColorString(232, 77, 48, 1),
            ColorUtil.ColorString(240, 240, 240, 0)
        };
        var ds = new PieDataset<decimal>(new decimal[]
        {
            (decimal)overview.Profit,
            (decimal)overview.PlanFull > (decimal)overview.Profit ? (decimal)overview.PlanFull - (decimal)overview.Profit : 0,
        });
        ds.BackgroundColor = datasetColors.ToArray();
        ds.BorderColor = ColorUtil.ColorString(0, 0, 0, 1);
        _pieFull.Data.Datasets.Add(ds);


        datasetColors = new()
        {
            // ColorUtil.ColorString(12, 90, 74, 1),
            ColorUtil.ColorString(0, 148, 209, 1),
            ColorUtil.ColorString(240, 240, 240, 0)
        };
        ds = new PieDataset<decimal>(new decimal[]
        {
            (decimal)overview.Profit,
            (decimal)overview.PlanSmall > (decimal)overview.Profit ? (decimal)overview.PlanSmall - (decimal)overview.Profit : 0,
        });
        ds.BackgroundColor = datasetColors.ToArray();
        ds.BorderColor = ColorUtil.ColorString(0, 0, 0, 1);
        _pieSmall.Data.Datasets.Add(ds);
    }
}
