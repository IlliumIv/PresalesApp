@page "/monitor"
@using PresalesMonitor.Shared;
@using PresalesMonitor.Client.Web.Helpers;
@using Google.Protobuf.Collections;
@using Google.Protobuf.WellKnownTypes;
@using Department = PresalesMonitor.Shared.Department;
@using Position = PresalesMonitor.Shared.Position;
@using System.Threading;
@inject Presales.PresalesClient PresalesClient

<PageTitle>Presales Monitor</PageTitle>

<h1>Presales Monitor</h1>

<p>
    <input title="Начало периода" type="date" max="@Helpers.ToMinMaxFormatString(to)" value="@Helpers.ToMinMaxFormatString(from)" @onchange="((ChangeEventArgs e) => OnFromChanged(e?.Value))" class="input-group-text" />
    <label>&nbsp;-&nbsp;</label>
    <input title="Конец периода" type="date" min="@Helpers.ToMinMaxFormatString(from)" value="@Helpers.ToMinMaxFormatString(to)" @onchange="((ChangeEventArgs e) => OnToChanged(e?.Value))" class="input-group-text" />
    <select title="Направление" value="@department" @onchange="((ChangeEventArgs e) => OnDepartmentChanged(e?.Value))" class="form-select">
        @foreach (Department dep in (Department[])System.Enum.GetValues(typeof(Department)))
            { <option value="@dep">@dep.GetName()</option> }
    </select>
    <select title="Должность" value="@position" @onchange="((ChangeEventArgs e) => OnPositionChanged(e?.Value))" class="form-select">
        @foreach (Position pos in (Position[])System.Enum.GetValues(typeof(Position)))
            { <option value="@pos">@pos.GetName()</option> }
    </select>
    <label for="onlyActive">Только действующие:</label>
    <input type="checkbox" id="onlyActive" value="@_onlyActive" @onchange="((ChangeEventArgs e) => OnStatusChanged(e?.Value))" checked/>
</p>

@if (overview == null)
    { <p><em>Loading...</em></p> }
else
{
    <table class="table">
        <thead class="pmthead">
            <tr>
                <th rowspan="2" style="width:11%">Пресейл</th>
                <th colspan="9">@Helpers.ToUpperFirstLetterString(Helpers.CurMonthName)</th>
                <th rowspan="2" style="width:5%" title="@inWorkTitle">InWork</th>
                <th rowspan="2" style="width:5%" title="@abndTitle">Abnd</th>
                <th rowspan="2" style="width:6%" title="@avgttwTitle">AvgTTW</th>
                <th rowspan="2" style="width:5%" title="@avgrTitle">AvgR</th>
                <th colspan="2">Дефицит</th>
            </tr>
            <tr>
                <th style="width:5%" title="@assignTitle">Assign</th>
                <th style="width:5%" title="@wonTitle">Won</th>
                <th style="width:5%" title="@lossTitle">Loss</th>
                <th style="width:5%" title="@convrTitle">Convr</th>
                <th style="width:11%">Потенциал</th>
                <th style="width:10%">Чистые</th>
                <th style="width:6%" title="@avgttrTitle">AvgTTR</th>
                <th style="width:4%" title="@spendSumTitle">Sum</th>
                <th style="width:4%" title="@spendAvgTitle">Avg</th>
                <th style="width:3%">шт.</th>
                <th style="width:10%">руб.</th>
            </tr>
        </thead>
        <tbody class="pmtbody">
            @foreach (var presale in overview.Presales)
            {
                <tr>
                    <td>@presale.Name</td>
                    <td title="@assignTitle">@Helpers.ToEmptyIfZeroString(presale.Statistics.Assign)</td>
                    <td title="@wonTitle">@Helpers.ToEmptyIfZeroString(presale.Statistics.Won)</td>
                    <td title="@lossTitle">@Helpers.ToEmptyIfZeroString(presale.Statistics.Loss)</td>
                    <td title="@convrTitle">@Helpers.ToPercentString(presale.Statistics.Conversion)</td>
                    <td>@Helpers.ToCurrencyString(presale.Statistics.Potential)</td>
                    <td>@Helpers.ToCurrencyString(presale.Statistics.Profit)</td>
                    <td title="@avgttrTitle">@Helpers.ToMinutesString(presale.Statistics.AvgTimeToReaction.ToTimeSpan())</td>
                    <td title="@spendSumTitle">@Helpers.ToHoursString(presale.Statistics.SumSpend.ToTimeSpan())</td>
                    <td title="@spendAvgTitle">@Helpers.ToHoursString(presale.Statistics.AvgSpend.ToTimeSpan())</td>
                    <td title="@inWorkTitle">@Helpers.ToEmptyIfZeroString(presale.Statistics.InWork)</td>
                    <td title="@abndTitle">@Helpers.ToEmptyIfZeroString(presale.Statistics.Abnd)</td>
                    <td title="@avgttwTitle">@Helpers.ToDaysString(presale.Statistics.AvgTimeToWin.ToTimeSpan())</td>
                    <td title="@avgrTitle">@Helpers.ToEmptyIfZeroString(Math.Round(presale.Statistics.AvgRank, 1))</td>
                    <td>@Helpers.ToEmptyIfZeroString(presale.DeficitProjects)</td>
                    <td>@Helpers.ToCurrencyString(presale.DeficitPotential)</td>
                </tr>
            }
            <tr>
                <td>Всего</td>
                <td title="@assignTitle">@Helpers.ToEmptyIfZeroString(overview.Statistics.Assign)</td>
                <td title="@wonTitle">@Helpers.ToEmptyIfZeroString(overview.Statistics.Won)</td>
                <td title="@lossTitle">@Helpers.ToEmptyIfZeroString(overview.Statistics.Loss)</td>
                <td title="@convrTitle">@Helpers.ToPercentString(overview.Statistics.Conversion)</td>
                <td>@Helpers.ToCurrencyString(overview.Statistics.Potential)</td>
                <td>@Helpers.ToCurrencyString(overview.Statistics.Profit)</td>
                <td title="@avgttrTitle">@Helpers.ToMinutesString(overview.Statistics.AvgTimeToReaction.ToTimeSpan())</td>
                <td title="@spendSumTitle">@Helpers.ToHoursString(overview.Statistics.SumSpend.ToTimeSpan())</td>
                <td title="@spendAvgTitle">@Helpers.ToHoursString(overview.Statistics.AvgSpend.ToTimeSpan())</td>
                <td title="@inWorkTitle">@Helpers.ToEmptyIfZeroString(overview.Statistics.InWork)</td>
                <td title="@abndTitle">@Helpers.ToEmptyIfZeroString(overview.Statistics.Abnd)</td>
                <td title="@avgttwTitle">@Helpers.ToDaysString(overview.Statistics.AvgTimeToWin.ToTimeSpan())</td>
                <td title="@avgrTitle">@Math.Round(overview.Statistics.AvgRank, 1)</td>
            </tr>
        </tbody>
    </table>

    @if (overview.AvgDirectorTimeToReaction.Seconds > 0)
        { <p>Среднее время реакции руководителя (среднее время до назначения) в минутах: @Helpers.ToMinutesString(overview.AvgDirectorTimeToReaction.ToTimeSpan())</p> }
    @if (overview.Escalations.Count > 0)
    {
        <details class="pmspoiler">
            <summary>Проекты с нарушением пунктов 3.1 и 3.2 Регламента (просроченные): @overview.Escalations.Count</summary>
            @foreach (var project in overview.Escalations)
                { <p>@Format(project)</p> }
        </details>
    }
    @if (overview.Forgotten.Count > 0)
    {
        <details class="pmspoiler">
            <summary>Проекты без отметки начала работы пресейлом (забытые): @overview.Forgotten.Count</summary>
            @foreach (var project in overview.Forgotten)
                { <p>@Format(project)</p> }
        </details>
    }
    @if (overview.New.Count > 0)
    {
        <details class="pmspoiler">
            <summary>Новые проекты (ожидают распределения): @overview.New.Count</summary>
            @foreach (var project in overview.New)
                { <p>@Format(project)</p> }
        </details>
    }
}

@code {
    private static DateOnly firstDay = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateOnly from = firstDay;
    private DateOnly to = firstDay.AddMonths(1).AddDays(-1);
    private Department department = Department.Any;
    private Position position = Position.Any;
    private Overview? overview;
    private bool _onlyActive = true;
    private PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(10));
    #region Descriptions
    private readonly string inWorkTitle = "В работе (есть действия за последние 30 дней)";
    private readonly string assignTitle = "Назначено";
    private readonly string wonTitle = "Выиграно";
    private readonly string lossTitle = "Проиграно";
    private readonly string convrTitle = "Конверсия";
    private readonly string abndTitle = "Заброшено (нет действий за последние 30 дней)";
    private readonly string avgttwTitle = "Среднее время жизни проекта до выигрыша в днях";
    private readonly string avgttrTitle = "Среднее время реакции пресейла в минутах";
    private readonly string avgrTitle = "Средний ранг проектов";
    private readonly string spendSumTitle = "Потрачено времени на проекты, суммарно в часах";
    private readonly string spendAvgTitle = "Потрачено времени на проекты, в среднем в часах";
    #endregion

    private string Format(Project project) =>
        $"{project.Number}, {project.Name}, " +
        $"{Helpers.ToOneDateString(project.ApprovalByTechDirectorAt, project.ApprovalBySalesDirectorAt)}" +
        $"{Helpers.ToDateString(project.PresaleStartAt, " - ")}" +
        $"{(string.IsNullOrEmpty(project.PresaleName) ? "" : $", {project.PresaleName}")}";
    public void Dispose() => periodicTimer?.Dispose();
    private async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync())
            await UpdateData();
    }
    private async Task UpdateData()
    {
        overview = await PresalesClient.GetOverviewAsync(new OverviewRequest
            {
                OnlyActive = _onlyActive,
                Department = department,
                Position = position,
                Period = new Period
                {
                    From = Timestamp.FromDateTime(from.ToDateTime(new TimeOnly(0, 0, 0)).ToUniversalTime()),
                    To = Timestamp.FromDateTime(to.ToDateTime(new TimeOnly(23, 59, 59)).ToUniversalTime())
                }
            });
        StateHasChanged();
    }

    protected override void OnInitialized() => RunTimer();
    private async void OnFromChanged(object? obj)
    {
        try { from = DateOnly.Parse(obj?.ToString()); }
        catch { return; }
        await UpdateData();
    }
    private async void OnToChanged(object? obj)
    {
        try { to = DateOnly.Parse(obj?.ToString()); }
        catch { return; }
        await UpdateData();
    }
    private async void OnDepartmentChanged(object? obj)
    {
        System.Enum.TryParse<Department>(obj?.ToString(), out department);
        await UpdateData();
    }
    private async void OnPositionChanged(object? obj)
    {
        System.Enum.TryParse<Position>(obj?.ToString(), out position);
        await UpdateData();
    }
    private async void OnStatusChanged(object? obj)
    {
        _onlyActive = obj == null ? _onlyActive : (bool)obj;
        await UpdateData();
    }
    protected override async Task OnInitializedAsync() => await UpdateData();
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine(_onlyActive);
        return base.OnAfterRenderAsync(firstRender);
    }
}
