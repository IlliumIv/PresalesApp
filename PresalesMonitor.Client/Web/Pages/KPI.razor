@page "/kpi"
@using Google.Protobuf.Collections;
@using PresalesMonitor.Entities.Enums;
@using PresalesMonitor.Shared;
@using PresalesMonitor.Client.Web.Helpers;
@using Google.Protobuf.WellKnownTypes;
@using System.Runtime.Serialization;
@using System.Globalization;
@inject Presales.PresalesClient PresalesClient
@inject IJSRuntime js

<PageTitle>KPI</PageTitle>

<h1>KPI</h1>

<p>
    <label>Месяц:</label>
    <select id="month" @bind="month" class="form-select">
        @for(int m = 1; m <= 12; m++)
        {
            <option value="@m">@DateTimeFormatInfo.CurrentInfo.GetMonthName(m)</option>
        }
    </select>
    <label>Год:</label>
    <select id="year" @bind="year" class="form-select">
        @for (int y = 2015; y <= DateTime.Now.Year; y++)
        {
            <option value="@y">@y</option>
        }
    </select>
</p>
<p>
    <label>Пресейл:&nbsp;</label>
    @if (presales == null)
    {
        <em>Loading...</em>
    }
    else
    {
        <select value="@selectedName" @onchange="((ChangeEventArgs e) => OnPresaleChange(e?.Value?.ToString() ?? string.Empty))" class="form-select">
            <option selected=""></option>
            @foreach (var name in presales.Names)
            {
                <option value="@name">@name</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="OnReportRequested">Построить отчёт</button>
        <button @attributes="downloadBtnAttrs" class="btn btn-primary" @onclick="DownloadFile">Скачать отчёт</button>
    }
</p>
<p role="status">@status</p>
@if (kpi is not null)
{
    <details class="pmspoiler">
        <summary>Легенда</summary>
            <p>
                По игнорируемым действиям:
                </p>
            <p style="margin-left: 100px">
                Если действие игнорируется по ошибке, то скорее всего у него неправильный тип выбран. Зайдите в проект и поправьте действие. После следующей синхронизации (раз в 10 минут) действие зачтётся.
                </p>

            <p>
                По игнорируемым проектам:
        </p>
        <p style="margin-left: 100px">
                Проект игнорируется, если он никогда не синхронизировался. Часто это основные проекты у дочерних или старые проекты, по которым прилетел счёт. То есть моему сервису известна только ЦБха и всё, никаких больше подробностей. Чтобы заставить сервис такой проект учитывать, просто добавьте в него любое пустое действие. После следующей синхронизации (раз в 10 минут) весь проект синхронизируется и все действия в нём будут учитываться. После этого пустое действие можно удалить или оставить - как хотите.
                </p>
            <p>
                Красным выделены те счета, по которым есть игнорируемые действия\проекты или премия посчитана 0.
                </p>
        <p>Сортировка:</p>
            <p style="margin-left: 100px">
                Чтобы порядок счетов тут совпадал с порядком счетов в 1С, нужно, чтобы отчёт по чистым группировал данные не по партнёру, а по контрагенту.
                Для этого можно воспользоваться преднастроенным вариантом отчёта из Органайзера ("Органайзер" > "Отчёты (органайзер)" > "Пресейлы, чистые продажи по контрагенту") или настроить отчёт самостоятельно.
                Если преднастроенный отчёт не отображается в органайзере, то его нужно включить ("Все действия" > "Настроить" > отметить отчёт галкой > "Сохранить изменения").
                Инструкция по самостоятельной настройке:
                <ol style="margin-left: 100px">
                    <li>В отчёте по чистым выбриаем вариант отчёта "ОТЧЕТ: Подразделение\Менеджер\Партнер\Валюта\ЗаказКлиента".</li>
                    <li>Нажимаем "Все действия" > "Изменить вариант".</li>
                    <li>В "Структуре отчёта" в четвёртом варианте группировки два раза тыкаем в "Партнёр":
                        <img style="width: 65%" src="partner_example.png">
                    </li>
                    <li>В открывшемся окне два раза тыкаем в "Партнёр" и заменяем на "Контрагент", нажимаем "ОК".</li>
                    <li>Нажимаем "Завершить редактирование" и формируем отчёт.</li>
                </ol>
            </p>
         </details>

    <table class="table">
        <thead>
            <tr>
                <th style="width: 2%">№</th>
                <th style="width: 32%">Контрагент</th>
                <th style="width: 5%">Номер</th>
                <th style="width: 15%">Дата</th>
                <th style="width: 11%; text-align: right">Сумма по счёту</th>
                <th style="width: 10%; text-align: right">Себестоимость</th>
                <th style="width: 10%; text-align: right">Прибыль</th>
                <th style="width: 5%; text-align: right">Процент</th>
                <th style="width: 10%; text-align: right">Премия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inv in kpi.Invoices)
            {
                int i = 0;
                i++;
                <tr style="color: @SetColor(inv)">
                    <td>@i</td>
                    <td>@inv.Counterpart</td>
                    <td>@inv.Number</td>
                    <td>@inv.Date.ToDateTime().ToLocalTime()</td>
                    <td style="text-align: right">@Helpers.ToCurrencyString(inv.Amount)</td>
                    <td style="text-align: right">@Helpers.ToCurrencyString(inv.Cost)</td>
                    <td style="text-align: right">@Helpers.ToCurrencyString(inv.SalesAmount)</td>
                    <td style="text-align: right">@Helpers.ToPercentString(inv.Percent, 1)</td>
                    <td style="text-align: right">@Helpers.ToCurrencyString(inv.Profit)</td>
                </tr>
                <tr><td colspan="9">
                    @if (inv.ProjectsFound.Count > 0)
                    {
                        <details class="pmspoiler">
                                <summary>Найдено проектов при подсчёте рангов: @inv.ProjectsFound.Count</summary>
                                @foreach (var project in inv.ProjectsFound)
                                {
                                    <p>@Format(project)</p>
                                }
                        </details>
                    }
                    @if (inv.ProjectsIgnored.Count > 0)
                    {
                        <details class="pmspoiler">
                                <summary style="color:red">Проигнорировано проектов при подсчёте рангов: @inv.ProjectsIgnored.Count</summary>
                                @foreach (var project in inv.ProjectsIgnored)
                                {
                                    <p>@Format(project)</p>
                                }
                        </details>
                    }
                    @if (inv.ActionsTallied.Count > 0)
                    {
                        <details class="pmspoiler">
                                <summary>Действий учтено при подсчёте рангов: @inv.ActionsTallied.Count</summary>
                                @foreach (var action in inv.ActionsTallied)
                                {
                                    <p>@Format(action)</p>
                                }
                        </details>
                    }
                    @if (inv.ActionsIgnored.Count > 0)
                    {
                        <details class="pmspoiler">
                                <summary style="color:red">Действий проигнорировано при подсчёте рангов: @inv.ActionsIgnored.Count</summary>
                                @foreach (var action in inv.ActionsIgnored)
                                {
                                    <p>@Format(action)</p>
                                }
                        </details>
                    }
                    </td></tr>
                <tr>&nbsp</tr>
            }
            <tr style="text-align: right">
                <td colspan="3">Оплачено времени: @Helpers.ToMinutesString(TimeSpan.FromMinutes(kpi.Invoices.Sum(i => i.ActionsTallied.Sum(a => a.Timespend.ToTimeSpan().TotalMinutes))))</td>
                <td>Всего:</td>
                <td>@Helpers.ToCurrencyString(kpi.Invoices.Sum(i => i.Amount))</td>
                <td></td>
                <td>@Helpers.ToCurrencyString(kpi.Invoices.Sum(i => i.SalesAmount))</td>
                <td></td>
                <td>@Helpers.ToCurrencyString(kpi.Invoices.Sum(i => i.Profit))</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private int month = DateTime.Now.Month;
    private int year = DateTime.Now.Year;
    private NamesResponse? presales;
    private Kpi? kpi;
    private Dictionary<string, object> downloadBtnAttrs { get; set; } = new() {{ "disabled", "disabled" }};
    protected override async Task OnInitializedAsync() { presales = await PresalesClient.GetNamesAsync(new Empty()); }
    private string selectedName = string.Empty;
    private static DateOnly firstDay = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1);
    private string status = string.Empty;
    private string SetColor(PresalesMonitor.Shared.Invoice invoice) => invoice.ProjectsIgnored.Count > 0 || (decimal)invoice.Profit == 0 ? "red" : "inherit";
    private string Format(PresalesMonitor.Shared.Project project) => $"{project.Number} [{Helpers.ToEnumString((ProjectStatus)project.Status)}], \"{project.Name}\"";
    private string Format(PresalesMonitor.Shared.Action action) => $"{action.ProjectNumber} [{Helpers.ToEnumString((ActionType)action.Type)}],{(action.Date.ToDateTime() == DateTime.MinValue ? "" : $" {action.Date.ToDateTime().ToLocalTime()}")} ({action.Timespend.ToTimeSpan().TotalMinutes}), \"{action.Description}\"";
    private async void OnReportRequested()
    {
        status = await GenerateReport();
        StateHasChanged();
    }

    private async Task<string> GenerateReport()
    {
        kpi = null;
        downloadBtnAttrs = new() {{ "disabled", "disabled" }};

        if (string.IsNullOrEmpty(selectedName)) return "Выберите пресейла.";

        var from = new DateTime(year, month, 1);
        var to = from.AddMonths(1).AddSeconds(-1);

        var response = await PresalesClient.GetKpiAsync(new KpiRequest
            {
                PresaleName = selectedName,
                Period = new Period
                {
                    From = Timestamp.FromDateTime(from.ToUniversalTime()),
                    To = Timestamp.FromDateTime(to.ToUniversalTime())
                }
            }
        );

        if (response.ResponseCase == KpiResponse.ResponseOneofCase.Kpi) kpi = response.Kpi;
        downloadBtnAttrs = new();

        return response.ResponseCase switch
        {
            KpiResponse.ResponseOneofCase.Error => response.Error.Message,
            KpiResponse.ResponseOneofCase.Kpi => "Отчёт сгенерирован!",
            KpiResponse.ResponseOneofCase.None => "Нет счетов за указанный период.",
            _ => "Неизвестный ответ сервера."
        };
    }
    private void DownloadFile()
    {
        if (kpi == null) return;
        Helpers.DownloadFile(kpi, js, selectedName, DateTimeFormatInfo.CurrentInfo.GetMonthName(month));
    }
    private void OnPresaleChange(string presaleName)
    {
        kpi = null;
        selectedName = presaleName;
        status = string.Empty;
    }
}