@page "/fetchdata"
@using PresalesMonitor.Shared;
@using Google.Protobuf.Collections;
@using Google.Protobuf.WellKnownTypes;
@inject Presales.PresalesClient PresalesClient

<PageTitle>Presales Monitor</PageTitle>

<h1>Presales Monitor</h1>

@if (presalesData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="pmthead">
            <tr>
                <th rowspan="2">Пресейл</th>
                <th rowspan="2" title="В работе">InWork</th>
                <th title="Назначено">Assign</th>
                <th title="Выиграно">Won</th>
                <th title="Проиграно">Loss</th>
                <th title="Конверсия">Convr</th>
                <th rowspan="2" title="Заброшено (нет действий за последние 30 дней)">Abnd</th>
                <th rowspan="2" title="Среднее время жизни проекта до выигрыша в днях">AvgTTW</th>
                <th rowspan="2" title="Среднее время реакции пресейла в минутах">AvgTTR</th>
                <th rowspan="2" title="Средний ранг проектов">AvgR</th>
                <th colspan="2" title="Потрачено времени на проекты, @curMonthName">Spend</th>
                <th rowspan="2">Чистые за месяц</th>
                <th colspan="2">Требуется распределить</th>
            </tr>
            <tr>
                <th colspan="4">@toUpper(curMonthName)</th>
                <th title="За месяц">Sum</th>
                <th title="В среднем">Avg</th>
                <th>шт.</th>
                <th>руб.</th>
            </tr>
        </thead>
        <tbody class="pmtbody">
            @foreach (var presale in presalesData.Presales)
            {
                <tr>
                    <td>@presale.Name</td>
                    <td>@presale.Statistics.InWork</td>
                    <td>@presale.Statistics.Assign</td>
                    <td>@presale.Statistics.Won</td>
                    <td>@presale.Statistics.Loss</td>
                    <td>@calcConversion(presale.Statistics.Won, presale.Statistics.Assign)</td>
                    <td>@presale.Statistics.Abnd</td>
                    <td>@toDays(presale.Statistics.AvgTimeToWin.ToTimeSpan())</td>
                    <td>@toMinutes(presale.Statistics.AvgTimeToReaction.ToTimeSpan())</td>
                    <td>@Math.Round(presale.Statistics.AvgRank, 1)</td>
                    <td>@toHoursOrMinutes(presale.Statistics.SumSpend.ToTimeSpan())</td>
                    <td>@toHoursOrMinutes(presale.Statistics.AvgSpend.ToTimeSpan())</td>
                    <td>@toCurrency(presale.Statistics.Profit)</td>
                    <td>@presale.DeficitProjects</td>
                    <td>@toCurrency(presale.DeficitPotential)</td>
                </tr>
            }
            <tr>
                <td>Всего</td>
                <td>@presalesData.Statistics.InWork</td>
                <td>@presalesData.Statistics.Assign</td>
                <td>@presalesData.Statistics.Won</td>
                <td>@presalesData.Statistics.Loss</td>
                <td>@calcConversion(presalesData.Statistics.Won, presalesData.Statistics.Assign)</td>
                <td>@presalesData.Statistics.Abnd</td>
                <td>@toDays(presalesData.Statistics.AvgTimeToWin.ToTimeSpan())</td>
                <td>@toMinutes(presalesData.Statistics.AvgTimeToReaction.ToTimeSpan())</td>
                <td>@Math.Round(presalesData.Statistics.AvgRank, 1)</td>
                <td>@toHoursOrMinutes(presalesData.Statistics.SumSpend.ToTimeSpan())</td>
                <td>@toHoursOrMinutes(presalesData.Statistics.AvgSpend.ToTimeSpan())</td>
                <td>@toCurrency(presalesData.Statistics.Profit)</td>
                <td colspan="2"></td>
            </tr>
        </tbody>
    </table>

    <p>Среднее время реакции руководителя (среднее время до назначения) в минутах: @toMinutes(presalesData.AvgDirectorTimeToReaction.ToTimeSpan())</p>
    @if (presalesData.Escalations.Count > 0)
    {
        <details class="pmspoiler">
            <summary>
                Проекты с нарушением пунктов 3.1 и 3.2 Регламента (просроченные): @presalesData.Escalations.Count
            </summary>
            @foreach (var s in toFormattedList(presalesData.Escalations)) { <p>@s</p> }
        </details>
    }
    @if (presalesData.Forgotten.Count > 0)
    {
        <details class="pmspoiler">
            <summary>
                Проекты без отметки начала работы пресейлом (забытые): @presalesData.Forgotten.Count
            </summary>
            @foreach (var s in toFormattedList(presalesData.Forgotten)) { <p>@s</p> }
        </details>
    }
    @if (presalesData.New.Count > 0)
    {
        <details class="pmspoiler">
            <summary>
                Новые проекты (ожидают распределения): @presalesData.New.Count
            </summary>
            @foreach (var s in toFormattedList(presalesData.New)) { <p>@s</p> }
        </details>
    }
}

<style>
    .pmthead {
        vertical-align: middle !important;
        text-align: center;
    }
    
    .pmthead tr,
    .pmthead th {
        border: 1px solid;
        border-color: inherit !important;
    }

    .pmtbody td:not(:last-child) {
        border-right: 1px solid;
        border-color: inherit;
    }

    .pmtbody, td:not(:first-child) {
        text-align: right;
    }

    .pmspoiler summary::marker {
        list-style-position: initial !important;
    }

    .pmspoiler p {
        margin-left: 50px;
        margin-bottom: 0;
    }
</style>

@code {
    string curMonthName => $"{DateTime.Now:MMMM}";
    string calcConversion(int won, int assing) => $"{(won == 0 || assing == 0 ? "" : won / (assing == 0 ? 0f : assing)):P0}";
    string toDays(TimeSpan avgTTW) => $"{(avgTTW == TimeSpan.Zero ? "" : avgTTW.TotalDays):f0}";
    string toMinutes(TimeSpan avgTTR) => $"{(avgTTR == TimeSpan.Zero ? "" : avgTTR.TotalMinutes):f0}";
    string toHoursOrMinutes(TimeSpan timeSpend) => $"{(timeSpend == TimeSpan.Zero ? "" : timeSpend.TotalMinutes / 60 < 1 ? $"{timeSpend.TotalMinutes / 60:f1}" : $"{timeSpend.TotalMinutes / 60:f0}")}";
    string toCurrency(decimal value) => $"{(value == 0 ? "" : value):C}";
    string toUpper(string value) => value.Length switch
    {
        0 => value,
        1 => char.ToUpper(value[0]).ToString(),
        _ => char.ToUpper(value[0]) + value.Substring(1)
    };

    private Data? presalesData;

    protected override async Task OnInitializedAsync()
    {
        presalesData = (await PresalesClient.GetStatisticsAsync(new Empty()));
    }

    private List<string> toFormattedList(RepeatedField<Project> projects)
    {
        var formattedList = new List<string>();
        foreach (var project in projects)
        {
            var s = $"{project.Number}";
            if (project.ApprovalByTechDirectorAt.ToDateTime() == DateTime.MinValue)
                s += $", {project.ApprovalBySalesDirectorAt.ToDateTime().ToLocalTime()}";
            else
                s += $", {project.ApprovalByTechDirectorAt.ToDateTime().ToLocalTime()}";
            if (project.PresaleStartAt.ToDateTime() != DateTime.MinValue)
                s += $" - {project.PresaleStartAt.ToDateTime().ToLocalTime()}";
            if (!string.IsNullOrEmpty(project.PresaleName))
                s += $", {project.PresaleName}";

            formattedList.Add(s);
        }
        return formattedList;
    }
}
