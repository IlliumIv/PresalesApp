@page "/dashboard"
@using PresalesMonitor.Shared;
@using Google.Protobuf.WellKnownTypes;
@using ChartJs.Blazor.PieChart;
@using PresalesMonitor.Client.Web.Helpers;
@using Department = PresalesMonitor.Shared.Department;
@using Position = PresalesMonitor.Shared.Position;
@using System.Threading;
@using Period = PresalesMonitor.Client.Web.Helpers.Period;
@inject Presales.PresalesClient PresalesClient
@implements IDisposable
@layout DashboardLayout
@inject IJSRuntime js

<PageTitle>Dashboard</PageTitle>

@if (overview == null || img == null)
    { <p><em>Loading...</em></p> }
else
{
    <div class="dashboard">
        <div class="chart">
            <div class="legend">
                @foreach (var item in overview.Presales.Select((presale, index) => new { index, presale }))
                {
                    if ((decimal)item.presale.Statistics.Profit > 0)
                    {
                        <div>
                            <div style="background: @colors[item.index]"></div>
                            <p>@item.presale.Name:</p>
                            <p>@Helpers.ToCurrencyString(item.presale.Statistics.Profit, "ru-RU")</p>
                        </div>
                    }
                }
            </div>
            <div class="pie">
                <Chart Config="pie_config"></Chart>
            </div>
            <div class="delta-container timer-container">
                <div class="timer">@time_left</div>
                @if ((decimal)overview.DeltaDay > 0)
                {
                    <div class="delta">+@Helpers.ToCurrencyString((decimal)overview.DeltaDay, "ru-RU")</div>
                }
            </div>
        </div>
        <div class="img-container">
            <img src="@img.Regular" alt="@img.AltDescription" />
            <div>
                <p>Photo by <a href="@img.AuthorUrl" target="_blank">@img.AuthorName</a> on <a href="@img.SourceUrl" target="_blank">@img.SourceName</a></p>
                <input @bind="@query" @bind:event="oninput" @onkeydown="@OnManuallyImageUpdate" />
            </div>
        </div>
    </div>
    <div class="percent">@Helpers.ToPercentString((double)(overview.Profit/overview.Plan), 1)</div>
    <div class="left">@Helpers.ToCurrencyString((decimal)overview.Left, "ru-RU")</div>
}

@code {
    private TimeSpan time_left = new (0, 10, 0);
    private MonthProfitOverview? overview;
    private PieConfig pie_config = new PieConfig();
    private ImageResponse? img;
    private string query = "girl";
    private PeriodicTimer periodic_timer = new(TimeSpan.FromSeconds(1));

    private Period period = new Period
        {
            From = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1),
            To = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day)
        };

    private string[] colors = new[]
        {
            ColorUtil.ColorHexString(5, 47, 97),
            ColorUtil.ColorHexString(165, 14, 130),
            ColorUtil.ColorHexString(12, 90, 74),
            ColorUtil.ColorHexString(232, 125, 55),
            ColorUtil.ColorHexString(106, 158, 31),
            ColorUtil.ColorHexString(20, 150, 124),
            ColorUtil.ColorHexString(99, 8, 78),
            ColorUtil.ColorHexString(198, 35, 36),
            ColorUtil.ColorHexString(3, 28, 58),
    };

    public void Dispose() => periodic_timer?.Dispose();
    private void UpdateChart()
    {
        if (overview == null) return;
        var dataset = new PieDataset<decimal>();
        List<string> datasetColors = new();
        List<string> datasetLabels = new();
        pie_config.Data.Labels.Clear();
        pie_config.Data.Datasets.Clear();

        foreach (var item in overview.Presales.Select((presale, index) => new { index, presale }))
        {
            if ((decimal)item.presale.Statistics.Profit > 0)
            {
                dataset.Add(item.presale.Statistics.Profit);
                datasetColors.Add(colors[item.index]);
                pie_config.Data.Labels.Add($"{item.presale.Name}: {Helpers.ToCurrencyString(item.presale.Statistics.Profit, "ru-RU")}");
            };
        };
        if ((decimal)overview.Left > 0)
        {
            dataset.Add((decimal)overview.Left);
            pie_config.Data.Labels.Add($"Осталось: {Helpers.ToCurrencyString((decimal)overview.Left, "ru-RU")}");
            datasetColors.Add(ColorUtil.ColorHexString(240, 240, 240));
        }

        dataset.BackgroundColor = datasetColors.ToArray();
        pie_config.Data.Datasets.Add(dataset);
    }
    private async void RunTimer()
    {
        int count = 0;
        var second = new TimeSpan(0, 0, 1);
        while (await periodic_timer.WaitForNextTickAsync())
        {
            time_left = time_left.Subtract(second);
            if (count > 600)
            {
                count = 0;
                period.To = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                await UpdateData(period);
                await UpdateImage();
                UpdateChart();
                time_left = new(0, 10, 0);
            }
            count++;
            StateHasChanged();
        }
    }
    private async Task UpdateData(Period period)
    {
        overview = await PresalesClient.GetMonthProfitOverviewAsync(new OverviewRequest
            {
                Period = period.Translate(),
                Department = Department.Any,
                Position = Position.Any
            });
    }
    private async Task UpdateImage() => img = await PresalesClient.GetImageAsync(new ImageRequest { Keyword = query, Orientation = ImageOrientation.Portrait});

    protected override void OnInitialized() => RunTimer();
    public async void OnManuallyImageUpdate(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await UpdateImage();
    }
    protected override async Task OnInitializedAsync()
    {
        await UpdateData(period);
        await UpdateImage();

        pie_config.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = false },
                Legend = new Legend { Display = false },
                Tooltips = new Tooltips { Enabled = false },
                CutoutPercentage = 30,
                Animation = new ArcAnimation
                {
                    AnimateScale = true,
                    AnimateRotate = true
                }
            };

        UpdateChart();
    }
}