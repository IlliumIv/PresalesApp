@page "/unpaid"
@using PresalesMonitor.Shared;
@using PresalesMonitor.Client.Web.Views;
@using PresalesMonitor.Client.Web.Helpers;
@using Google.Protobuf.WellKnownTypes;
@using Department = PresalesMonitor.Shared.Department;
@using Position = PresalesMonitor.Shared.Position;
@inject Presales.PresalesClient PresalesClient
@inject IJSRuntime js

<PageTitle>Unpaid</PageTitle>

<h1>Unpaid</h1>
<p>
    Все проекты, закрытые за период, к которым не привязано ни одного отгруженного счёта.
</p>
<p>
    <input title="Начало периода" type="date" max="@Helpers.ToMinMaxFormatString(to)" value="@Helpers.ToMinMaxFormatString(from)" @onchange="((ChangeEventArgs e) => OnFromChanged(e?.Value))" class="input-group-text" />
    <label>&nbsp;-&nbsp;</label>
    <input title="Конец периода" type="date" min="@Helpers.ToMinMaxFormatString(from)" value="@Helpers.ToMinMaxFormatString(to)" @onchange="((ChangeEventArgs e) => OnToChanged(e?.Value))" class="input-group-text" />
    <input title="Учитывать счета в основных проектах" type="checkbox" id="lookAtMains" value="@lookAtMains" @onchange="((ChangeEventArgs e) => OnModeChanged(e?.Value))" unchecked class="inline-check" />
    <select title="Направление" value="@department" @onchange="((ChangeEventArgs e) => OnDepartmentChanged(e?.Value))" class="form-select">
        @foreach (Department dep in (Department[])System.Enum.GetValues(typeof(Department)))
            { <option value="@dep">@dep.GetName()</option> }
    </select>
    <select title="Должность" value="@position" @onchange="((ChangeEventArgs e) => OnPositionChanged(e?.Value))" class="form-select">
        @foreach (Position pos in (Position[])System.Enum.GetValues(typeof(Position)))
            { <option value="@pos">@pos.GetName()</option> }
    </select>
    <button @attributes="downloadBtnAttrs" class="btn btn-primary" @onclick="DownloadFile">Скачать отчёт</button>
</p>

@if(projects == null) { <p><em>Loading...</em></p>
}
else {
    <ProjectsTable Projects="projects.Projects"></ProjectsTable>
}

@code {
    private UnpaidProjects? projects;

    private static DateOnly lastDay = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1);
    private DateOnly from = new DateOnly(1, 1, 1);
    private DateOnly to = new DateOnly(lastDay.Year, lastDay.Month, lastDay.Day);
    private Department department = Department.Any;
    private Position position = Position.Any;
    private bool lookAtMains = false;

    private Dictionary<string, object> downloadBtnAttrs { get; set; } = new() { { "disabled", "disabled" } };

    protected override async Task OnInitializedAsync() => await UpdateData();
    private async Task UpdateData()
    {
        Console.WriteLine("UpdateData");
        try
        {
            projects = await PresalesClient.GetUnpaidProjectsAsync(new OverviewRequest
                {
                    OnlyActive = lookAtMains,
                    Department = department,
                    Position = position,
                    Period = new Period
                    {
                        From = Timestamp.FromDateTime(from.ToDateTime(new TimeOnly(0, 0, 0)).ToUniversalTime()),
                        To = Timestamp.FromDateTime(to.ToDateTime(new TimeOnly(23, 59, 59)).ToUniversalTime())
                    }
                });
            downloadBtnAttrs = new();
        }
        catch
        {
            downloadBtnAttrs = new() { { "disabled", "disabled" } };
        }
        StateHasChanged();
    }
    private async Task DownloadFile() => await projects.Download(js);
    private async void OnFromChanged(object? obj)
    {
        Console.WriteLine("OnFromChanged");
        try { from = DateOnly.Parse(obj?.ToString()); }
        catch { return; }
        await UpdateData();
    }
    private async void OnToChanged(object? obj)
    {
        Console.WriteLine("OnToChanged");
        try { to = DateOnly.Parse(obj?.ToString()); }
        catch { return; }
        await UpdateData();
    }
    private async void OnDepartmentChanged(object? obj)
    {
        System.Enum.TryParse<Department>(obj?.ToString(), out department);
        await UpdateData();
    }
    private async void OnPositionChanged(object? obj)
    {
        System.Enum.TryParse<Position>(obj?.ToString(), out position);
        await UpdateData();
    }
    private async void OnModeChanged(object? obj)
    {
        lookAtMains = obj == null ? lookAtMains : (bool)obj;
        await UpdateData();
    }
}