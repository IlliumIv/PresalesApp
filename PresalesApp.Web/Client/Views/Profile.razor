@inject AuthorizeApi _autorizeApi
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <RadzenButton ButtonStyle=ButtonStyle.Dark Variant=Variant.Outlined>
            @_profile.Name
            </RadzenButton>
        <RadzenButton ButtonStyle=ButtonStyle.Dark Variant=Variant.Outlined Click=@Logout>
            @Localization["LogoutButtonText"]
            </RadzenButton>
    </Authorized>
    <NotAuthorized>
        <RadzenButton ButtonStyle=ButtonStyle.Dark Variant=Variant.Outlined Click=@(() => _registerModal.Show())>
            @Localization["RegisterModalButtonText"]
            </RadzenButton>
        <RadzenButton ButtonStyle=ButtonStyle.Dark Variant=Variant.Outlined Click=@(() => _loginModal.Show())>
            @Localization["LoginButtonModalText"]
            </RadzenButton>
    </NotAuthorized>
</AuthorizeView>

<Modal @ref="_loginModal">
    <ModalContent Centered>
        <ModalBody>
            <Field>
                <FieldLabel>@Localization["LoginText"]</FieldLabel>
                <TextEdit Placeholder="@Localization["LoginTextPlaceholder"]" Role="TextRole.Text" @bind-Text="_login" />
            </Field>
            <Field>
                <FieldLabel>@Localization["PasswordText"]</FieldLabel>
                <TextEdit Placeholder="@Localization["PasswordTextPlaceholder"]" Role="TextRole.Password" @bind-Text="_password" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@(() => _loginModal.Hide())">@Localization["CloseButtonText"]</Button>
            <Button Color="Color.Dark" Clicked="@Login" Disabled="@_loginDisabled">@Localization["LoginButtonModalText"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_registerModal">
    <ModalContent Centered>
        <ModalBody>
            <Field>
                <FieldLabel>@Localization["UsernameText"]</FieldLabel>
                <TextEdit Placeholder="@Localization["UsernameTextPlaceholder"]" Role="TextRole.Text" @bind-Text="@_profile.Name" />
            </Field>
            <Field>
                <FieldLabel>@Localization["LoginText"]</FieldLabel>
                <TextEdit Placeholder="@Localization["LoginTextPlaceholder"]" Role="TextRole.Text" @bind-Text="_login" />
            </Field>
            <Field>
                <FieldLabel>@Localization["PasswordText"]</FieldLabel>
                <TextEdit Placeholder="@Localization["PasswordTextPlaceholder"]" Role="TextRole.Password" @bind-Text="_password" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@(() => _registerModal.Hide())">@Localization["CloseButtonText"]</Button>
            <Button Color="Color.Dark" Clicked="@Register" Disabled="@_registerDisabled">@Localization["RegisterModalButtonText"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

    @code {
    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    private UserProfile _profile => IdentityAuthenticationStateProvider.Profile;

    private Modal _loginModal;
    private Modal _registerModal;

    private bool _loginDisabled = false;
    private bool _registerDisabled = false;

    private string _login;
    private string _password;

    private async Task Register()
    {
        _registerDisabled = true;
        try
        {
            if (await _autorizeApi.TryRegister(new RegisterRequest
                {
                    LoginRequest = new LoginRequest
                    {
                        Login = _login,
                        Password = _password
                    },
                    Profile = _profile
                }))
            {
                await _registerModal.Hide();
                Navigation.NavigateTo(Navigation.Uri, true);
            }
        }
        catch (Exception e)
        {
            await messageHandler.Show(e.Message);
        }
        _registerDisabled = false;
    }

    private async Task Login()
    {
        _loginDisabled = true;
        try
        {
            if (await _autorizeApi.TryLogin(new LoginRequest
                {
                    Login = _login,
                    Password = _password
                }))
            {
                await _loginModal.Hide();
                Navigation.NavigateTo(Navigation.Uri, true);
            }
        }
        catch (Exception e)
        {
            await messageHandler.Show(e.Message);
        }
        _loginDisabled = false;
    }

    private async Task Logout()
    {
        await _autorizeApi.Logout();
        Navigation.NavigateTo(Navigation.Uri, true);
    }
}

