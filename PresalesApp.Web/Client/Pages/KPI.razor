@page "/kpi"
@using Period = PresalesApp.Web.Client.Helpers.Period
@inject IJSRuntime js

<PageTitle>@Localization["KpiPage"]</PageTitle>

<h1>@Localization["KpiPage"]</h1>
<div class="d-flex">
    <ComboBox_PresalesNames OnSelectCallback="(async (string name) => {presale_name = name; await GenerateReport();})">
    </ComboBox_PresalesNames>
    <ComboBox_Months OnSelectCallback="(async (int month) => {this.month = month; await GenerateReport();})">
    </ComboBox_Months>
    <ComboBox_Years OnSelectCallback="(async (int year) => {this.year = year; await GenerateReport();})">
    </ComboBox_Years>
    <button @attributes="btn_download_attr" class="btn btn-primary" @onclick="DownloadReport">@Localization["DownloadReportButtonText"]</button>
</div>
@if (kpi is not null)
{
    <details class="pmspoiler">
        <summary>Легенда</summary>
        <p>По игнорируемым <span style="color:red">действиям</span>:</p>
        <p style="margin-left: 100px">Если действие игнорируется по ошибке, то скорее всего у него <span style="color:red">выбран неправильный тип</span>. Зайдите в проект и поправьте действие. После следующей синхронизации (раз в 10 минут) действие зачтётся.</p>
        <p>По игнорируемым <span style="color:red">проектам</span>:</p>
        <p style="margin-left: 100px">Проект игнорируется, если он <span style="color:red">никогда не синхронизировался</span> или в нём <span style="color:red">нет действий</span>, которые можно было бы учесть. Часто это основные проекты у дочерних или старые проекты, по которым прилетел счёт. То есть моему сервису известна только ЦБха и всё, никаких больше подробностей. Чтобы заставить сервис такой проект учитывать, просто добавьте в него любое пустое действие. После следующей синхронизации (раз в 10 минут) весь проект синхронизируется и все действия в нём будут учитываться. После этого пустое действие можно удалить или оставить - как хотите.</p>
        <p><span style="color:red">Красным</span> выделены те счета, по которым <span style="color:red">есть игнорируемые действия\проекты</span> или <span style="color:red">премия посчитана 0</span>.</p>
        <p>Сортировка:</p>
        <p style="margin-left: 100px">
            Чтобы порядок счетов тут совпадал с порядком счетов в 1С, нужно, чтобы отчёт по чистым группировал данные не по партнёру, а по контрагенту.
            Для этого можно воспользоваться преднастроенным вариантом отчёта из Органайзера ("Органайзер" > "Отчёты (органайзер)" > "Пресейлы, чистые продажи по контрагенту") или настроить отчёт самостоятельно.
            Если преднастроенный отчёт не отображается в органайзере, то его нужно включить ("Все действия" > "Настроить" > отметить отчёт галкой > "Сохранить изменения").
            Инструкция по самостоятельной настройке:
            <ol style="margin-left: 100px">
                <li>В отчёте по чистым выбриаем вариант отчёта "ОТЧЕТ: Подразделение\Менеджер\Партнер\Валюта\ЗаказКлиента".</li>
                <li>Нажимаем "Все действия" > "Изменить вариант".</li>
                <li>В "Структуре отчёта" в четвёртом варианте группировки два раза тыкаем в "Партнёр":<img style="width: 65%" src="images/partner_example.png"></li>
                <li>В открывшемся окне два раза тыкаем в "Партнёр" и заменяем на "Контрагент", нажимаем "ОК".</li>
                <li>Нажимаем "Завершить редактирование" и формируем отчёт.</li>
            </ol>
        </p>
    </details>
    <Table_Invoices Invoices="kpi.Invoices"></Table_Invoices>
}

@code {
    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    private int month = DateTime.Now.Month;
    private int year = DateTime.Now.Year;
    private string presale_name = string.Empty;

    private Kpi? kpi;
    private Dictionary<string, object> btn_download_attr { get; set; } = new() {{ "disabled", "disabled" }};

    private async Task DownloadReport() => await kpi.Download(js, presale_name, month, year, Localization);
    private async Task GenerateReport()
    {
        kpi = null;
        btn_download_attr = new() {{ "disabled", "disabled" }};

        if (string.IsNullOrEmpty(presale_name))
        {
            await messageHandler.Show($"{Localization["NeedSelectPresaleMessageText"]}");
            return;
        }

        var from = new DateOnly(year, month, 1);
        var response = await Api.GetKpiAsync(new KpiRequest
            {
                PresaleName = presale_name,
                Period = new Period
                {
                    From = from,
                    To = from.AddMonths(1).AddDays(-1)
                }.Translate()
            }
        );

        if (response.ResultCase == KpiResponse.ResultOneofCase.Kpi)
        {
            kpi = response.Kpi;
            btn_download_attr = new();
        }

        (string message, SnackbarColor color) msg = response.ResultCase switch
        {
            KpiResponse.ResultOneofCase.Error => (response.Error.Message, SnackbarColor.Danger),
            KpiResponse.ResultOneofCase.Kpi => ($"{Localization["ReportIsDoneMessageText"]}", SnackbarColor.Success),
            KpiResponse.ResultOneofCase.None => ($"{Localization["NoInvoicesForThisPeriodMessageText"]}", SnackbarColor.Success),
            _ => ($"{Localization["UnknownServerResponseMessageText"]}", SnackbarColor.Danger)
        };

        await messageHandler.Show(msg.message, msg.color);
        StateHasChanged();
    }
}