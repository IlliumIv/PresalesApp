@page "/presales-dashboard"
@using Department = PresalesApp.Web.Shared.Department
@using Position = PresalesApp.Web.Shared.Position
@using Period = PresalesApp.Web.Client.Helpers.Period
@using System.Threading
@implements IDisposable
@layout InfographicsLayout

<PageTitle>@Localization["PresalesDashboardPage"]</PageTitle>

<div class="dashboard">
    <div class="chart">
        <div class="legend">
            @if (overview != null)
            {
                foreach (var item in overview.Presales.Select((presale, index) => new { index, presale }))
                {
                    if ((decimal)item.presale.Statistics.Profit > 0)
                    {
                        <div>
                            <div style="background: @ChartColor.FromRgba(colors[item.index].R, colors[item.index].G, colors[item.index].B, color_alfa).ToString()"></div>
                            <p>@item.presale.Name.GetFirstAndLastName():</p>
                            <p>@Helpers.ToCurrencyString(item.presale.Statistics.Profit)</p>
                        </div>
                    }
                }
            }
            else
            {
                <Loader />
            }
        </div>
        <div class="delta-container timer-container">
            <div class="timer">@time_left</div>
            @if (overview != null && (decimal)overview.DeltaDay > 0)
            {
                <div class="delta">+@Helpers.ToCurrencyString((decimal)overview.DeltaDay)</div>
            }
        </div>
        <div class="pie">
            <PieChart @ref="chart" TItem="decimal" OptionsJsonString="@chart_options" />
        </div>
        <div style="position: relative">
            @if (overview != null)
            {
                <div class="percent">@(overview.Plan != 0 ? Helpers.ToPercentString((double)(overview.Profit / overview.Plan), 1) : "")</div>
                <div class="left">@Helpers.ToCurrencyString((decimal)overview.Left)</div>
            }
        </div>
    </div>
    <div class="img-container">
        @if (img != null)
        {
            <img src="@img.Regular" alt="@img.AltDescription" />
            <div>
                <p>
                    @((MarkupString)Localization["UnsplashCredits",
                        (MarkupString)$"<a href=\"{img.AuthorUrl}\" target=\"_blank\">{img.AuthorName}</a>",
                        (MarkupString)$"<a href=\"{img.SourceUrl}\" target=\"_blank\">{img.SourceName}</a>"].Value)
                </p>
                <input @bind="@image_keyword" @bind:event="oninput" @onkeydown="@OnManuallyImageUpdate" />
            </div>
        }
    </div>
</div>


@code {
    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    private TimeSpan time_left = new (0, 10, 0);

    private MonthProfitOverview overview;

    private PieChart<decimal> chart;

    private static ImageResponse img;

    string image_keyword = "girl";

    #region UriQuery
    const string q_keyword = "Keyword";
    [SupplyParameterFromQuery(Name = q_keyword)] public string? keyword { get; set; }

    const string q_start = "Start";
    [SupplyParameterFromQuery(Name = q_start)] public string? start { get; set; }

    const string q_end = "End";
    [SupplyParameterFromQuery(Name = q_end)] public string? end { get; set; }

    Dictionary<string, object?> queryKeyValues => new()
        {
            [q_start] = period.Start.ToString(Helpers.UriDateTimeFormat),
            [q_end] = period.End.ToString(Helpers.UriDateTimeFormat),
            [q_keyword] = image_keyword,
        };
    #endregion

    protected override void OnInitialized()
    {
        Helpers.SetFromQueryOrStorage(value: start, query: q_start, uri: Navigation.Uri, storage: Storage, param: ref period.Start);
        Helpers.SetFromQueryOrStorage(value: end, query: q_end, uri: Navigation.Uri, storage: Storage, param: ref period.End);
        Helpers.SetFromQueryOrStorage(value: keyword, query: q_keyword, uri: Navigation.Uri, storage: Storage, param: ref image_keyword);

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameters(queryKeyValues));
        RunTimer();
    }

    private PeriodicTimer periodic_timer = new(TimeSpan.FromSeconds(1));

    private static DateTime firstDay => new(DateTime.Now.Year, DateTime.Now.Month, 1);
    private static DateTime lastDay => firstDay.AddMonths(1).AddSeconds(-1);
    private Period period = new(firstDay, lastDay);

    private string chart_options => "{\"cutout\":\"30%\",\"animation\":{\"animateScale\": true},\"plugins\":{\"tooltip\":{\"enabled\": false}}}";

    private (byte R, byte G, byte B)[] colors = new[]
    {
        ((byte)5, (byte)47, (byte)91),
        ((byte)165, (byte)14, (byte)130),
        ((byte)12, (byte)90, (byte)74),
        ((byte)232, (byte)125, (byte)55),
        ((byte)106, (byte)158, (byte)31),
        ((byte)20, (byte)150, (byte)124),
        ((byte)99, (byte)8, (byte)78),
        ((byte)198, (byte)35, (byte)36),
        ((byte)3, (byte)28, (byte)58)
    };

    private float color_alfa = 0.5f;

    private async void RunTimer()
    {
        int count = 0;
        var second = new TimeSpan(0, 0, 1);
        while (await periodic_timer.WaitForNextTickAsync())
        {
            time_left = time_left.Subtract(second);
            if (count > 600)
            {
                count = 0;
                period.Start = firstDay;
                period.End = lastDay;
                await UpdateData(period);
                await UpdateImage();
                await RedrawChart();
                time_left = new(0, 10, 0);
            }
            count++;
            StateHasChanged();
        }
    }

    private async Task UpdateData(Period period)
    {
        try
        {
            overview = await AppApi.GetMonthProfitOverviewAsync(new OverviewRequest
                {
                    Period = period.Translate(),
                    Department = Department.Any,
                    Position = Position.Any
                });
        }
        catch
        {
            await messageHandler.Show(Localization["ConnectErrorTryLater", Localization["PWAServerName"]].Value);
            return;
        }
    }

    private async Task UpdateImage() => img = await AppApi.GetImageAsync(new ImageRequest
    {
        Keyword = image_keyword,
        Orientation = ImageOrientation.Portrait
    });

    private async Task RedrawChart()
    {
        if (overview == null) return;

        await chart.Clear();
        var dataset = new List<decimal>();
        var backgroud_colors = new List<string>();
        var border_colors = new List<string>();

        foreach (var item in overview.Presales.Select((presale, index) => new { index, presale }))
        {
            if ((decimal)item.presale.Statistics.Profit > 0)
            {
                dataset.Add(item.presale.Statistics.Profit);
                backgroud_colors.Add(ChartColor.FromRgba(colors[item.index].R, colors[item.index].G, colors[item.index].B, color_alfa));
                border_colors.Add(ChartColor.FromRgba(colors[item.index].R, colors[item.index].G, colors[item.index].B, 1));
            };
        };

        if ((decimal)overview.Left > 0)
        {
            dataset.Add(overview.Left);
            backgroud_colors.Add(ChartColor.FromRgba(240, 240, 240, 0.5f));
            border_colors.Add(ChartColor.FromRgba(240, 240, 240, 1));
        }

        await chart.AddDatasetsAndUpdate(new PieChartDataset<decimal>()
        {
            Data = dataset,
            BackgroundColor = backgroud_colors,
            BorderColor = border_colors
        });
    }

    private async void OnManuallyImageUpdate(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Storage.SetItemAsString($"{new Uri(Navigation.Uri).LocalPath}.{q_keyword}", image_keyword);
            Navigation.NavigateTo(Navigation.GetUriWithQueryParameters(queryKeyValues));
            await UpdateImage();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateData(period);
            await UpdateImage();
            await RedrawChart();
        }
    }

    public void Dispose() => periodic_timer?.Dispose();
}