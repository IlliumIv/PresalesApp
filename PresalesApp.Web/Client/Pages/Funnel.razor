@page "/funnel"

<PageTitle>@Localization["FunnelPage"]</PageTitle>

<h1>@Localization["FunnelPage"]</h1>

@if (response == null)
{
    <Loader />
}
else
{
    <DataGrid TItem="Project"
          Data="@response?.Projects"
          DetailRowStartsVisible="false"
            Filterable
          Sortable="false"
          RowStyling="@OnRowStyling"
          SelectedRowStyling="@OnRowStyling"
            ShowPager
          PageSize="15"
            Responsive>
    <DataGridColumns>
        <DataGridCommandColumn />
        <DataGridColumn Field="@nameof(Project.Presale)" Caption="@Localization["PresaleNameText"]"
                        Editable="false" Width="15%" CustomFilter="@DataGridFilters.PresaleFilter" Context="project">
            <DisplayTemplate>
                @{
                        var name = (project as Project)?.Presale?.Name;
                        string placeholder = Localization["PresaleNotAssignedYetMessage"];
                        if (!string.IsNullOrEmpty(name))
                            placeholder = name;
                    }
                    @placeholder
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(Project.Number)" Caption="@Localization["ProjectNumberText"]"
                        Editable="false" Width="10%" CustomFilter="@DataGridFilters.DefaultFilter" />
            <DataGridColumn Field="@nameof(Project.Potential)" Caption="@Localization["ProjectPotentialText"]"
                        Editable="false" Width="10%" CustomFilter="@DataGridFilters.DecimalValueFilter" Context="project">
                <DisplayTemplate>
                    @($"{@Helpers.ToCurrencyString((project as Project)?.Potential)}")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridDateColumn Field="@nameof(Project.ApprovalByTechDirectorAt)" Caption="@Localization["ProjectApprovalByTechDirectorAtText"]"
                            Editable="false" Width="15%" CustomFilter="@DataGridFilters.DateTimeFilter" Context="project">
                <DisplayTemplate>
                    @($"{(project as Project)?.ApprovalByTechDirectorAt.ToDateTime().ToPresaleTime()}")
                </DisplayTemplate>
            </DataGridDateColumn>
            <DataGridColumn Field="@nameof(Project.Name)" Caption="@Localization["ProjectNameText"]"
                        Editable="false" CustomFilter="@DataGridFilters.DefaultFilter" />
        </DataGridColumns>
        <DetailRowTemplate>
            @{
                var actions = (context as Project).Actions.Where(a => a.SalesFunnel).OrderBy(a => a.Number);
                if (!actions.Any()) return;
                <DataGrid TItem="Web.Shared.Action"
                  Data="actions"
                  Sortable="false"
                  ShowCaptions="false">
                    <DataGridCommandColumn />
                    <DataGridNumericColumn Field="@nameof(Web.Shared.Action.Number)" />
                    <DataGridDateColumn Field="@nameof(Web.Shared.Action.Date)" Context="action" Width="15%">
                        <DisplayTemplate>
                            @($"{(action as Web.Shared.Action)?.Date.ToDateTime().ToPresaleTime()}")
                        </DisplayTemplate>
                    </DataGridDateColumn>
                    <DataGridColumn Field="@nameof(Web.Shared.Action.Description)" />
                </DataGrid>
            }
        </DetailRowTemplate>
    </DataGrid>
}

@code {
    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    private FunnelProjects? response;

    private void OnRowStyling(Project project, DataGridRowStyling styling)
    {
        if (!project.Actions.Any(a => a.SalesFunnel))
            styling.Style = "color: red;";
    }

    protected override async Task OnParametersSetAsync() => await UpdateData();

    private async Task UpdateData()
    {
        try
        {
            response = await Api.GetFunnelProjectsAsync(new Empty());
        }
        catch (Exception e)
        {
            await messageHandler.Show(e.Message);
        }
        StateHasChanged();
    }
}
