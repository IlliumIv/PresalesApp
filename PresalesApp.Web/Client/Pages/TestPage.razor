@page "/testpage"
@layout TestLayout
@using PresalesApp.Bridge1C
@using PresalesApp.Web.Client.Enums
@using System.Globalization
@using Period = PresalesApp.Web.Client.Helpers.Period

<div class="d-flex">
    <RadzenButton ButtonType=Radzen.ButtonType.Button ButtonStyle=ButtonStyle.Dark Click=DoSomething>Say Hello</RadzenButton>
    <Button Type="Blazorise.ButtonType.Button" Color="Color.Dark" Clicked="(async () => await HandleRedraw())">Redraw Chart</Button>
</div>
<p>@reply?.Message</p>
<p>@Period.Start - @Period.End, @Period.Type --- @counter</p>
<PeriodPicker Period="@Period" PeriodChanged="OnPeriodChanged" />
<RadzenButton ButtonType=Radzen.ButtonType.Button ButtonStyle=ButtonStyle.Dark Click=CleanStorage>Clean Storage</RadzenButton>
<div style="width: 500px;height: 500px">
    <PieChart @ref="pieChart" TItem="double" />
</div>

@code {
    HelloReply? reply;

    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    int counter = 0;

    #region UriQuery
    const string queryFrom = "from";
    [SupplyParameterFromQuery(Name = queryFrom)] public string? from { get; set; }

    const string queryTo = "to";
    [SupplyParameterFromQuery(Name = queryTo)] public string? to { get; set; }

    const string queryPeriod = "period";
    [SupplyParameterFromQuery(Name = queryPeriod)] public string? period { get; set; }

    Dictionary<string, object?> queryKeyValues => new()
        {
            [queryFrom] = Period.Start.ToString(Helpers.UriDateTimeFormat),
            [queryTo] = Period.End.ToString(Helpers.UriDateTimeFormat),
            [queryPeriod] = Period.Type.ToString(),
        };
    # endregion

    public Period Period = new(DateTime.Now, PeriodType.Arbitrary);

    void CleanStorage()
    {
        Storage.RemoveItem($"{new Uri(Navigation.Uri).LocalPath}.{queryFrom}");
        Storage.RemoveItem($"{new Uri(Navigation.Uri).LocalPath}.{queryTo}");
        Storage.RemoveItem($"{new Uri(Navigation.Uri).LocalPath}.{queryPeriod}");
    }

    async void DoSomething() => await HandleSayHello();

    void OnPeriodChanged(Period period)
    {
        Period = period;

        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{queryFrom}", Period.Start);
        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{queryTo}", Period.End);
        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{queryPeriod}", Period.Type);

        counter++;

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameters(queryKeyValues));
    }

    protected override void OnInitialized()
    {
        Helpers.SetFromQueryOrStorage(value: from, query: queryFrom, uri: Navigation.Uri, storage: Storage, param: ref Period.Start);
        Helpers.SetFromQueryOrStorage(value: to, query: queryTo, uri: Navigation.Uri, storage: Storage, param: ref Period.End);
        Helpers.SetFromQueryOrStorage(value: period, query: queryPeriod, uri: Navigation.Uri, storage: Storage, param: ref Period.Type);

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameters(queryKeyValues));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await HandleRedraw();
    }

    async Task HandleSayHello()
    {
        try
        {
            reply = await BridgeApi.SayHelloAsync(new HelloRequest() { Name = "Иван" });
        }
        catch (Exception e)
        {
            await messageHandler.Show(e.Message);
        }
        StateHasChanged();
    }

    async Task HandleRedraw()
    {
        await pieChart.Clear();
        await pieChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
    }

    PieChart<double> pieChart;
    PieChartDataset<double> GetLineChartDataset()
    {
        return new PieChartDataset<double>
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                // Fill = true,
                // PointRadius = 3,
                // CubicInterpolationMode = "monotone",
            };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double>
        {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble()
        };
    }
}
