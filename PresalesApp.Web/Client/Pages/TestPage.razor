@page "/testpage"
@using PresalesApp.Bridge1C
@using PresalesApp.Web.Client.Enums

<div class="d-flex">
    <RadzenButton ButtonType=Radzen.ButtonType.Button ButtonStyle=ButtonStyle.Dark Click=DoSomething>Say Hello</RadzenButton>
    <Button Type="Blazorise.ButtonType.Button" Color="Color.Dark" Clicked="(async () => await HandleRedraw())">Redraw Chart</Button>
</div>
<p>@reply?.Message</p>
<PeriodPicker @ref=picker1 FromQueryName="from1" ToQueryName="to1" PeriodQueryName="period1" Params="Params" />
<br>
<PeriodPicker @ref=picker2 FromQueryName="from2" ToQueryName="to2" PeriodQueryName="period2" Params="Params" />
<br>
<Button Type="Blazorise.ButtonType.Button" Color="Color.Dark" Clicked="DoSmt">Log Values</Button>
<div style="width: 500px;height: 500px">
    <PieChart @ref="pieChart" TItem="double" />
</div>

@code {
    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    PeriodPicker picker1;
    PeriodPicker picker2;

    void DoSmt()
    {
        Console.WriteLine(picker1.From);
        Console.WriteLine(picker1.To);
        Console.WriteLine(picker1.Period);
        Console.WriteLine(picker2.From);
        Console.WriteLine(picker2.To);
        Console.WriteLine(picker2.Period);
    }

    HelloReply? reply;

    Dictionary<string, object?> Params = new()
        {
            ["from1"] = null,
            ["from2"] = null,
            ["to1"] = null,
            ["to2"] = null,
            ["period1"] = null,
            ["period2"] = null,
        };

    async void DoSomething() => await HandleSayHello();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleSayHello()
    {
        try
        {
            reply = await BridgeApi.SayHelloAsync(new HelloRequest() { Name = "Иван" });
        }
        catch (Exception e)
        {
            await messageHandler.Show(e.Message);
        }
        StateHasChanged();
    }

    async Task HandleRedraw()
    {
        await pieChart.Clear();
        await pieChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
    }

    PieChart<double> pieChart;
    PieChartDataset<double> GetLineChartDataset()
    {
        return new PieChartDataset<double>
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                // Fill = true,
                // PointRadius = 3,
                // CubicInterpolationMode = "monotone",
            };
    }
     
    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble() };
    }
}
