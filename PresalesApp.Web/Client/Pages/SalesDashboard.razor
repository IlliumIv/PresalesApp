@page "/sales-dashboard"
@using System.Threading
@using Period = PresalesApp.Web.Client.Helpers.Period
@implements IDisposable
@layout InfographicsLayout
@inject IJSRuntime js

<PageTitle>@Localization["SalesDashboardPage"]</PageTitle>

<div class="overview">
    <div class="legend">
        <fieldset class="salesTarget">
            <legend>План @Format(current.From) - @Format(current.To)</legend>
            <p>@if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.CurrentSalesTarget)
                    ;
                }</p>
        </fieldset>
        <fieldset class="actualProfit">
            <legend>Факт @Format(current.From) - @Format(current.To)</legend>
            <p>@if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.CurrentActualProfit)
                    ;
                }</p>
        </fieldset>
        <fieldset class="previousActualProfit">
            <legend>Факт @Format(previous.From) - @Format(previous.To)</legend>
            <p>@if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.PreviousActualProfit)
                    ;
                }</p>
        </fieldset>
        <fieldset class="increase">
            <legend>Динамика</legend>
            <p>@if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.CurrentActualProfit - overview.PreviousActualProfit, true)
                    ;
                }</p>
        </fieldset>
    </div>
    @if (overview == null)
    {
        <Loader />
    }
    <div class="chart">
        <div class="charts">
            <PieChart @ref="profitChart" TItem="decimal" OptionsJsonString="@pieChartOptions" />
            <div class="percent">
                <p>
                    @if (overview != null)
                    {
                        @Helpers.ToPercentString(overview.CurrentSalesTarget != 0 ? decimal.ToDouble(overview.CurrentActualProfit / overview.CurrentSalesTarget) : 0)
                        ;
                    }
                </p>
            </div>
        </div>
        <div class="top">
            <fieldset class="leaderboard">
                <legend>Лидеры продаж</legend>
                <table>
                    @if (overview != null)
                    {
                        @foreach (var item in overview.CurrentTopSalesManagers.Select((manager, index) => new { index, manager }))
                        {
                            var manager = item.manager;
                            <tr>
                                <td><div style="background:@dataset_сolors[item.index]">&nbsp;</div></td>
                                <td>@(item.index + 1). </td>
                                <td>@manager.Name</td>
                                <td>@Helpers.ToCurrencyString(manager.Profit)</td>
                            </tr>
                        }
                    }
                </table>
            </fieldset>
        </div>
    </div>
</div>
<div class="params d-flex">
    <div class="@class_hide">
        <label>Предыдущий период:</label>
        <DateOnly_Period Period="previous"
                         OnPeriodChangedCallback="(async (Period period) => {previous = period; await HandleRedrawChart();})">
        </DateOnly_Period>
        <label>Текущий период:</label>
        <DateOnly_Period Period="current"
                         OnPeriodChangedCallback="(async (Period period) => {current = period; await HandleRedrawChart();})">
        </DateOnly_Period>
        <button class="btn btn-primary" title="@title_pin" @onclick="PinParams">
            <span class="oi oi-pin @class_rotatePin"></span>
        </button>
        <button class="btn btn-primary" title="Обновить данные" @onclick="HandleRedrawChart">
            <span class="oi oi-reload"></span>
        </button>
    </div>
</div>

@code {
    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    private string title_pin = "Закрепить";
    private string class_hide = "hide";
    private string class_rotatePin = "rotatePin";
    private SalesOverview? overview;
    private static List<string> dataset_сolors = new() { };

    private static readonly DateOnly first_day = new DateOnly(DateTime.Now.Year, ((DateTime.Now.Month - 1) / 3 + 1) * 3 - 2, 1);

    private static Period current = new Period
        {
            From = first_day,
            To = first_day.AddMonths(3).AddDays(-1)
        };

    private static Period previous = new Period
        {
            From = first_day.AddYears(-1),
            To = first_day.AddYears(-1).AddMonths(3).AddDays(-1)
        };

    PieChart<decimal> profitChart;

    private string Format(DateOnly date) => $"{date:dd.MM.yyyy}";

    private void PinParams()
    {
        if (class_hide.Length > 0)
        {
            class_hide = "";
            title_pin = "Открепить";
            class_rotatePin = "";
        }
        else
        {
            class_hide = "hide";
            title_pin = "Закрепить";
            class_rotatePin = "rotatePin";
        }
    }

    private PeriodicTimer periodic_timer = new(TimeSpan.FromMinutes(10));

    private async Task UpdateData()
    {
        try
        {
            overview = await AppApi.GetSalesOverviewAsync(new SalesOverviewRequest
                {
                    Previous = previous.Translate(),
                    Current = current.Translate()
                });
        }
        catch
        {
            await messageHandler.Show(Localization["ConnectErrorTryLater", Localization["PWAServerName"]].Value);
            StateHasChanged();
            return;
        }
    }

    // private async Task UpdateImage() => _img = await PresalesClient.GetImageAsync(new ImageRequest { Keyword = "happy new year", Orientation = ImageOrientation.Landscape });

    protected override void OnInitialized() => RunTimer();
    public void Dispose() => periodic_timer?.Dispose();

    string pieChartOptions => "{\"animation\":{\"animateScale\": true},\"plugins\":{\"tooltip\":{\"enabled\": false}}}";

    private async void RunTimer()
    {
        while (await periodic_timer.WaitForNextTickAsync())
        {
            await HandleRedrawChart();
        }
    }

    async Task HandleRedrawChart()
    {
        if (previous.From > previous.To)
        {
            await messageHandler.Show("Начало предыдущего периода должно быть меньше окончания!");
            StateHasChanged();
            return;
        }

        if (current.From > current.To)
        {
            await messageHandler.Show("Начало текущего периода должно быть меньше окончания!");
            StateHasChanged();
            return;
        }

        await UpdateData();
        if (overview == null) return;

        await profitChart.Clear();
        dataset_сolors = new List<string>();

        var dataset = new List<decimal>();
        var rnd = new Random();

        foreach (var manager in overview.CurrentTopSalesManagers)
        {
            dataset.Add(manager.Profit);
            dataset_сolors.Add(ChartColor.FromRgba(Convert.ToByte(rnd.Next(255)), Convert.ToByte(rnd.Next(255)), Convert.ToByte(rnd.Next(255)), 1));
        }

        var sum = overview.CurrentTopSalesManagers.Sum(m => m.Profit);
        if (overview.CurrentActualProfit > sum)
        {
            dataset.Add(overview.CurrentActualProfit - sum);
            dataset_сolors.Add(ChartColor.FromRgba(Convert.ToByte(rnd.Next(255)), Convert.ToByte(rnd.Next(255)), Convert.ToByte(rnd.Next(255)), 1));
        }

        if (overview.CurrentSalesTarget > overview.CurrentActualProfit)
        {
            dataset.Add(overview.CurrentSalesTarget - overview.CurrentActualProfit);
            dataset_сolors.Add(ChartColor.FromRgba(240, 240, 240, 0));
        }

        await profitChart.AddDatasetsAndUpdate(new PieChartDataset<decimal>()
            {
                Data = dataset,
                BackgroundColor = dataset_сolors,
                // BorderColor = ChartColor.FromRgba(0, 0, 0, 1),
                // BorderAlign = "center",
                // BorderWidth = 1,
            });

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedrawChart();
        }
    }
}
