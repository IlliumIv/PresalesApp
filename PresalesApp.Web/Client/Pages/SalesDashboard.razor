@page "/sales-dashboard"
@using System.Threading
@using Period = PresalesApp.Web.Client.Helpers.Period
@using System.Globalization
@implements IDisposable
@layout InfographicsLayout
@inject IJSRuntime js

<PageTitle>@Localization["SalesDashboardPage"]</PageTitle>

<div class="overview">
        <div class="legend">
            <fieldset class="previousActualProfit">
                <legend>Факт @(Previous.GetLocalizedPeriodName(Localization, false))</legend>
                <p>
                    @if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.PreviousActualProfit)
                    ;
                }
            </p>
        </fieldset>
        <fieldset class="salesTarget">
            <legend>План @(Current.GetLocalizedPeriodName(Localization, false))</legend>
            <p>@if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.CurrentSalesTarget)
                    ;
                }</p>
        </fieldset>
        <fieldset class="actualProfit">
            <legend>Факт @(Current.GetLocalizedPeriodName(Localization, false))</legend>
            <p>@if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.CurrentActualProfit)
                    ;
                }</p>
        </fieldset>
        <fieldset class="increase">
            <legend>Динамика</legend>
            <p>@if (overview != null)
                {
                    @Helpers.ToCurrencyString(overview.CurrentActualProfit - overview.PreviousActualProfit, true)
                    ;
                }</p>
        </fieldset>
    </div>
    @if (overview == null)
    {
        <Loader />
    }
    <div class="chart">
        <div class="charts">
            <PieChart @ref="profitChart" TItem="decimal" OptionsJsonString="@pieChartOptions" />
            <div class="percent">
                <p>
                    @if (overview != null)
                    {
                        @Helpers.ToPercentString(overview.CurrentSalesTarget != 0 ? decimal.ToDouble(overview.CurrentActualProfit / overview.CurrentSalesTarget) : 0)
                        ;
                    }
                </p>
            </div>
        </div>
        <div class="top">
            <fieldset class="leaderboard">
                <legend>Лидеры продаж</legend>
                <table>
                    @if (overview != null)
                    {
                        @foreach (var item in overview.CurrentTopSalesManagers.Select((manager, index) => new { index, manager }))
                        {
                            var manager = item.manager;
                            <tr>
                                <td><div style="background:@dataset_colors[item.index]">&nbsp;</div></td>
                                <td>@(item.index + 1). </td>
                                <td>@manager.Name</td>
                                <td>@Helpers.ToCurrencyString(manager.Profit)</td>
                            </tr>
                        }
                    }
                </table>
            </fieldset>
        </div>
    </div>
</div>
<div class="params d-flex">
    <div class="@class_hide">
        <label>Предыдущий период:</label>
        <PeriodPicker Period="@Previous" PeriodChanged="(async (period) => { Previous = period; await OnPeriodChanged(); })" />
        <p />
        <label>Текущий период:</label>
        <PeriodPicker Period="@Current" PeriodChanged="(async (period) => { Current = period; await OnPeriodChanged(); })" />
        <p />
        <button class="btn btn-primary" title="@title_pin" @onclick="PinParams">
            <span class="oi oi-pin @class_rotatePin" />
        </button>
        <button class="btn btn-primary" title="Обновить данные" @onclick="HandleRedrawChart">
            <span class="oi oi-reload" />
        </button>
    </div>
</div>

@code {
    [CascadingParameter]
    public MessageSnackbar GlobalMsgHandler { get; set; }

    #region UriQuery
    const string q_prev_start = "pStart";
    [SupplyParameterFromQuery(Name = q_prev_start)] public string? prev_start { get; set; }

    const string q_prev_end = "pEnd";
    [SupplyParameterFromQuery(Name = q_prev_end)] public string? prev_end { get; set; }

    const string q_prev_period_type = "pPeriod";
    [SupplyParameterFromQuery(Name = q_prev_period_type)] public string? prev_period_type { get; set; }

    const string q_curr_start = "cStart";
    [SupplyParameterFromQuery(Name = q_curr_start)] public string? curr_start { get; set; }

    const string q_curr_end = "cEnd";
    [SupplyParameterFromQuery(Name = q_curr_end)] public string? curr_end { get; set; }

    const string q_curr_period_type = "cPeriod";
    [SupplyParameterFromQuery(Name = q_curr_period_type)] public string? curr_period_type { get; set; }

    Dictionary<string, object?> queryKeyValues => new()
        {
            [q_prev_start] = Previous.Start.ToString(Helpers.UriDateTimeFormat),
            [q_prev_end] = Previous.End.ToString(Helpers.UriDateTimeFormat),
            [q_prev_period_type] = Previous.Type.ToString(),
            [q_curr_start] = Current.Start.ToString(Helpers.UriDateTimeFormat),
            [q_curr_end] = Current.End.ToString(Helpers.UriDateTimeFormat),
            [q_curr_period_type] = Current.Type.ToString(),
        };
    #endregion

    private string title_pin = "Закрепить";
    private string class_hide = "hide";
    private string class_rotatePin = "rotatePin";
    private SalesOverview? overview;
    List<string> dataset_colors = new() { };
    List<string> border_colors = new() { };

    static DateTime first_day = new DateTime(DateTime.Now.Year, ((DateTime.Now.Month - 1) / 3 + 1) * 3 - 2, 1);
    private static Period Current = new(first_day, Enums.PeriodType.Quarter);
    private static Period Previous = new(first_day.AddYears(-1), Enums.PeriodType.Quarter);

    PieChart<decimal> profitChart;

    async Task OnPeriodChanged()
    {
        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{q_prev_start}", Previous.Start);
        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{q_prev_end}", Previous.End);
        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{q_prev_period_type}", Previous.Type);

        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{q_curr_start}", Current.Start);
        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{q_curr_end}", Current.End);
        Storage.SetItem($"{new Uri(Navigation.Uri).LocalPath}.{q_curr_period_type}", Current.Type);

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameters(queryKeyValues));

        await HandleRedrawChart();
    }

    private void PinParams()
    {
        if (class_hide.Length > 0)
        {
            class_hide = "";
            title_pin = "Открепить";
            class_rotatePin = "";
        }
        else
        {
            class_hide = "hide";
            title_pin = "Закрепить";
            class_rotatePin = "rotatePin";
        }
    }

    private PeriodicTimer periodic_timer = new(TimeSpan.FromMinutes(10));

    private async Task UpdateData()
    {
        try
        {
            overview = await AppApi.GetSalesOverviewAsync(new SalesOverviewRequest
                {
                    Previous = Previous.Translate(),
                    Current = Current.Translate()
                });
        }
        catch
        {
            await GlobalMsgHandler.Show(Localization["ConnectErrorTryLater", Localization["PWAServerName"]].Value);
            StateHasChanged();
            return;
        }
    }

    // private async Task UpdateImage() => _img = await PresalesClient.GetImageAsync(new ImageRequest { Keyword = "happy new year", Orientation = ImageOrientation.Landscape });

    protected override void OnInitialized()
    {
        Helpers.SetFromQueryOrStorage(value: prev_start, query: q_prev_start, uri: Navigation.Uri, storage: Storage, param: ref Previous.Start);
        Helpers.SetFromQueryOrStorage(value: prev_end, query: q_prev_end, uri: Navigation.Uri, storage: Storage, param: ref Previous.End);
        Helpers.SetFromQueryOrStorage(value: prev_period_type, query: q_prev_period_type, uri: Navigation.Uri, storage: Storage, param: ref Previous.Type);

        Helpers.SetFromQueryOrStorage(value: curr_start, query: q_curr_start, uri: Navigation.Uri, storage: Storage, param: ref Current.Start);
        Helpers.SetFromQueryOrStorage(value: curr_end, query: q_curr_end, uri: Navigation.Uri, storage: Storage, param: ref Current.End);
        Helpers.SetFromQueryOrStorage(value: curr_period_type, query: q_curr_period_type, uri: Navigation.Uri, storage: Storage, param: ref Current.Type);

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameters(queryKeyValues));

        RunTimer();
    }
    public void Dispose() => periodic_timer?.Dispose();

    string pieChartOptions => "{\"animation\":{\"animateScale\": true},\"plugins\":{\"tooltip\":{\"enabled\": false}}}";

    private async void RunTimer()
    {
        while (await periodic_timer.WaitForNextTickAsync())
        {
            await HandleRedrawChart();
        }
    }

    async Task HandleRedrawChart()
    {
        if (Previous.Start > Previous.End)
        {
            await GlobalMsgHandler.Show("Начало предыдущего периода должно быть меньше окончания!");
            StateHasChanged();
            return;
        }

        if (Current.Start > Current.End)
        {
            await GlobalMsgHandler.Show("Начало текущего периода должно быть меньше окончания!");
            StateHasChanged();
            return;
        }

        await UpdateData();
        if (overview == null) return;

        await profitChart.Clear();
        dataset_colors = new List<string>();
        border_colors = new List<string>();
        float colors_alfa = 0.5f;

        var dataset = new List<decimal>();
        var rnd = new Random();

        foreach (var manager in overview.CurrentTopSalesManagers)
        {
            dataset.Add(manager.Profit);
            var r = rnd.Next(255);
            var g = rnd.Next(255);
            var b = rnd.Next(255);
            dataset_colors.Add(ChartColor.FromRgba(Convert.ToByte(r), Convert.ToByte(g), Convert.ToByte(b), colors_alfa));
            border_colors.Add(ChartColor.FromRgba(Convert.ToByte(r), Convert.ToByte(g), Convert.ToByte(b), 1));
        }

        var sum = overview.CurrentTopSalesManagers.Sum(m => m.Profit);
        if (overview.CurrentActualProfit > sum)
        {
            dataset.Add(overview.CurrentActualProfit - sum);
            var r = rnd.Next(255);
            var g = rnd.Next(255);
            var b = rnd.Next(255);
            dataset_colors.Add(ChartColor.FromRgba(Convert.ToByte(r), Convert.ToByte(g), Convert.ToByte(b), colors_alfa));
            border_colors.Add(ChartColor.FromRgba(Convert.ToByte(r), Convert.ToByte(g), Convert.ToByte(b), 1));
        }

        if (overview.CurrentSalesTarget > overview.CurrentActualProfit)
        {
            dataset.Add(overview.CurrentSalesTarget - overview.CurrentActualProfit);
            dataset_colors.Add(ChartColor.FromRgba(240, 240, 240, colors_alfa));
            border_colors.Add(ChartColor.FromRgba(240, 240, 240, 1));
        }

        await profitChart.AddDatasetsAndUpdate(new PieChartDataset<decimal>()
            {
                Data = dataset,
                BackgroundColor = dataset_colors,
                BorderColor = border_colors
                // BorderAlign = "center",
                // BorderWidth = 1,
            });

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedrawChart();
        }
    }
}
