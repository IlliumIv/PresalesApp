@page "/unpaid"
@using Period = PresalesApp.Web.Client.Helpers.Period
@inject IJSRuntime js

<PageTitle>@Localization["UnpaidPage"]</PageTitle>

<h1>@Localization["UnpaidPage"]</h1>
<p>@Localization["UnpaidPageDescription"]</p>
<div class="d-flex">
    <ComboBox_PresalesNames OnSelectCallback="@(async (string name) => { presale_name = name; await UpdateData();})" />
    <DateOnly_Period Period="period" OnPeriodChangedCallback="(async (Period period) => { this.period = period; await UpdateData();})" />
    <input title="Учитывать счета в основных проектах" type="checkbox"
            id="lookAtMains" value="@is_main_project_include"
            @onchange="((ChangeEventArgs e) => OnModeChanged(e?.Value))"
            unchecked class="inline-check" style="cursor: help;" />

    <Button @attributes="downloadBtnAttrs" Color="Color.Dark" Clicked="DownloadFile">@Localization["DownloadReportButtonText"]</Button>
</div>

@if (response == null)
{
    <Loader />
}
else
{
    <DataGrid TItem="Project"
          Data="@response?.Projects"
            Filterable
          Sortable="false"
          PageSize="@int.MaxValue"
            Responsive>
    <DataGridColumns>
        <DataGridCommandColumn />
        <DataGridColumn Field="@nameof(Project.Number)" Caption="@Localization["ProjectNumberText"]"
                        Editable="false" Width="10%" CustomFilter="@DataGridFilters.DefaultFilter" />
        <DataGridColumn Field="@nameof(Project.Name)" Caption="@Localization["ProjectNameText"]"
                        Editable="false" CustomFilter="@DataGridFilters.DefaultFilter" />
        <DataGridColumn Field="@nameof(Project.Presale)" Caption="@Localization["PresaleNameText"]"
                        Editable="false" Width="15%" CustomFilter="@DataGridFilters.PresaleFilter" Context="project">
            <DisplayTemplate>
                @{
                        var name = (project as Project)?.Presale?.Name.GetFirstAndLastName();
                    }
                    @(!string.IsNullOrEmpty(name) ? name : Localization["PresaleNotAssignedYetMessage"])
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(Project.Status)" Caption="@Localization["ProjectStatusText"]"
                        Editable="false" CustomFilter="@DataGridFilters.DefaultFilter" Context="project" Filterable="false">
                <DisplayTemplate>
                    @((project as Project)?.Status.GetLocalizedName(Localization))
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(Project.Potential)" Caption="@Localization["ProjectPotentialText"]"
                        Editable="false" Width="10%" CustomFilter="@DataGridFilters.DecimalValueFilter" Context="project">
                <DisplayTemplate>
                    @($"{@Helpers.ToCurrencyString((project as Project)?.Potential)}")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridDateColumn Field="@nameof(Project.ClosedAt)" Caption="@Localization["ProjectCloseDateText"]"
                            Editable="false" Width="15%" CustomFilter="@DataGridFilters.DateTimeFilter" Context="project">
                <DisplayTemplate>
                    @($"{(project as Project)?.ClosedAt.ToDateTime().ToPresaleTime()}")
                </DisplayTemplate>
            </DataGridDateColumn>
        </DataGridColumns>
    </DataGrid>
}

@code {
    [CascadingParameter]
    public MessageSnackbar messageHandler { get; set; }

    private UnpaidProjects? response;
    private string presale_name = string.Empty;
    private bool is_main_project_include = false;

    private static readonly DateOnly first_day = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1);
    private Period period = new Period
        {
            From = first_day,
            To = first_day.AddMonths(1).AddDays(-1)
        };

    private Dictionary<string, object> downloadBtnAttrs { get; set; } = new() { { "disabled", "disabled" } };

    protected override async Task OnParametersSetAsync() => await UpdateData();

    private async Task UpdateData()
    {
        try
        {
            response = await AppApi.GetUnpaidProjectsAsync(new UnpaidRequest()
            {
                IsMainProjectInclude = is_main_project_include,
                PresaleName = presale_name,
                Period = period.Translate()
            });
            downloadBtnAttrs = new();
        }
        catch (Exception e)
        {
            downloadBtnAttrs = new() { { "disabled", "disabled" } };
            await messageHandler.Show(e.Message);
        }
        StateHasChanged();
    }

    private async Task DownloadFile() => await response.Download(js, Localization);

    private async void OnModeChanged(object? obj)
    {
        is_main_project_include = obj == null ? is_main_project_include : (bool)obj;
        await UpdateData();
    }
}