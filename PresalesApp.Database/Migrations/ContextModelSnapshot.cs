// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PresalesApp.Database;

#nullable disable

namespace PresalesApp.Database.Migrations
{
    [DbContext(typeof(DbController.ReadWriteContext))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PresalesApp.Database.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Counterpart")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastPayAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastShipmentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PresaleId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PresaleId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Presale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Department")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Presales", (string)null);
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.PresaleAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<bool>("SalesFunnel")
                        .HasColumnType("boolean");

                    b.Property<int>("TimeSpend")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PresaleActions", (string)null);
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.ProfitPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("ProfitPeriods", (string)null);
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalBySalesDirectorAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ApprovalByTechDirectorAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LossReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MainProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PotentialAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PotentialWinAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PresaleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PresaleStartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainProjectId");

                    b.HasIndex("PresaleId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Update", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SynchronizedTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Updates", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Update");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Updates.CacheLog", b =>
                {
                    b.HasBaseType("PresalesApp.Database.Entities.Update");

                    b.Property<DateTime>("PeriodBegin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("CacheLog");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Updates.CacheLogsUpdate", b =>
                {
                    b.HasBaseType("PresalesApp.Database.Entities.Update");

                    b.HasDiscriminator().HasValue("CacheLogsUpdate");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Updates.ProjectsUpdate", b =>
                {
                    b.HasBaseType("PresalesApp.Database.Entities.Update");

                    b.HasDiscriminator().HasValue("ProjectsUpdate");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Invoice", b =>
                {
                    b.HasOne("PresalesApp.Database.Entities.Presale", "Presale")
                        .WithMany("Invoices")
                        .HasForeignKey("PresaleId");

                    b.HasOne("PresalesApp.Database.Entities.Project", "Project")
                        .WithMany("Invoices")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Presale");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.PresaleAction", b =>
                {
                    b.HasOne("PresalesApp.Database.Entities.Project", "Project")
                        .WithMany("PresaleActions")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.ProfitPeriod", b =>
                {
                    b.HasOne("PresalesApp.Database.Entities.Invoice", "Invoice")
                        .WithMany("ProfitPeriods")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Project", b =>
                {
                    b.HasOne("PresalesApp.Database.Entities.Project", "MainProject")
                        .WithMany()
                        .HasForeignKey("MainProjectId");

                    b.HasOne("PresalesApp.Database.Entities.Presale", "Presale")
                        .WithMany("Projects")
                        .HasForeignKey("PresaleId");

                    b.Navigation("MainProject");

                    b.Navigation("Presale");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Invoice", b =>
                {
                    b.Navigation("ProfitPeriods");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Presale", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PresalesApp.Database.Entities.Project", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PresaleActions");
                });
#pragma warning restore 612, 618
        }
    }
}
